/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module "zapatos/schema" {
  import type * as db from "zapatos/db";
  import type * as c from "zapatos/custom";

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary {
    version: 104;
  }

  /* === schema: public === */

  /* --- enums --- */

  export type mpaa_rating = "G" | "NC-17" | "PG" | "PG-13" | "R";
  export namespace every {
    export type mpaa_rating = ["G", "NC-17", "PG", "PG-13", "R"];
  }

  /* --- tables --- */

  /**
   * **actor**
   * - Table in database
   */
  export namespace actor {
    export type Table = "actor";
    export interface Selectable {
      /**
       * **actor.actor_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('actor_actor_id_seq'::regclass)`
       */
      actor_id: number;
      /**
       * **actor.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string;
      /**
       * **actor.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string;
      /**
       * **actor.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
    }
    export interface JSONSelectable {
      /**
       * **actor.actor_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('actor_actor_id_seq'::regclass)`
       */
      actor_id: number;
      /**
       * **actor.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string;
      /**
       * **actor.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string;
      /**
       * **actor.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **actor.actor_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('actor_actor_id_seq'::regclass)`
       */
      actor_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **actor.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **actor.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **actor.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **actor.actor_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('actor_actor_id_seq'::regclass)`
       */
      actor_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **actor.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **actor.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **actor.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **actor.actor_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('actor_actor_id_seq'::regclass)`
       */
      actor_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **actor.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **actor.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **actor.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "actor_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **actor_info**
   * - View in database
   */
  export namespace actor_info {
    export type Table = "actor_info";
    export interface Selectable {
      /**
       * **actor_info.actor_id**
       * - `int4` in database
       * - Nullable, no default
       */
      actor_id: number | null;
      /**
       * **actor_info.first_name**
       * - `text` in database
       * - Nullable, no default
       */
      first_name: string | null;
      /**
       * **actor_info.last_name**
       * - `text` in database
       * - Nullable, no default
       */
      last_name: string | null;
      /**
       * **actor_info.film_info**
       * - `text` in database
       * - Nullable, no default
       */
      film_info: string | null;
    }
    export interface JSONSelectable {
      /**
       * **actor_info.actor_id**
       * - `int4` in database
       * - Nullable, no default
       */
      actor_id: number | null;
      /**
       * **actor_info.first_name**
       * - `text` in database
       * - Nullable, no default
       */
      first_name: string | null;
      /**
       * **actor_info.last_name**
       * - `text` in database
       * - Nullable, no default
       */
      last_name: string | null;
      /**
       * **actor_info.film_info**
       * - `text` in database
       * - Nullable, no default
       */
      film_info: string | null;
    }
    export interface Whereable {
      /**
       * **actor_info.actor_id**
       * - `int4` in database
       * - Nullable, no default
       */
      actor_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **actor_info.first_name**
       * - `text` in database
       * - Nullable, no default
       */
      first_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **actor_info.last_name**
       * - `text` in database
       * - Nullable, no default
       */
      last_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **actor_info.film_info**
       * - `text` in database
       * - Nullable, no default
       */
      film_info?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **address**
   * - Table in database
   */
  export namespace address {
    export type Table = "address";
    export interface Selectable {
      /**
       * **address.address_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('address_address_id_seq'::regclass)`
       */
      address_id: number;
      /**
       * **address.address**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      address: string;
      /**
       * **address.address2**
       * - `text` in database
       * - Nullable, no default
       */
      address2: string | null;
      /**
       * **address.district**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      district: string;
      /**
       * **address.city_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      city_id: number;
      /**
       * **address.postal_code**
       * - `text` in database
       * - Nullable, no default
       */
      postal_code: string | null;
      /**
       * **address.phone**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      phone: string;
      /**
       * **address.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
    }
    export interface JSONSelectable {
      /**
       * **address.address_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('address_address_id_seq'::regclass)`
       */
      address_id: number;
      /**
       * **address.address**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      address: string;
      /**
       * **address.address2**
       * - `text` in database
       * - Nullable, no default
       */
      address2: string | null;
      /**
       * **address.district**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      district: string;
      /**
       * **address.city_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      city_id: number;
      /**
       * **address.postal_code**
       * - `text` in database
       * - Nullable, no default
       */
      postal_code: string | null;
      /**
       * **address.phone**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      phone: string;
      /**
       * **address.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **address.address_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('address_address_id_seq'::regclass)`
       */
      address_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **address.address**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      address?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **address.address2**
       * - `text` in database
       * - Nullable, no default
       */
      address2?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **address.district**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      district?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **address.city_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      city_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **address.postal_code**
       * - `text` in database
       * - Nullable, no default
       */
      postal_code?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **address.phone**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      phone?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **address.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **address.address_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('address_address_id_seq'::regclass)`
       */
      address_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **address.address**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      address: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **address.address2**
       * - `text` in database
       * - Nullable, no default
       */
      address2?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **address.district**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      district: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **address.city_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      city_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **address.postal_code**
       * - `text` in database
       * - Nullable, no default
       */
      postal_code?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **address.phone**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      phone: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **address.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **address.address_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('address_address_id_seq'::regclass)`
       */
      address_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **address.address**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      address?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **address.address2**
       * - `text` in database
       * - Nullable, no default
       */
      address2?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | string
            | db.Parameter<string>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **address.district**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      district?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **address.city_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      city_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **address.postal_code**
       * - `text` in database
       * - Nullable, no default
       */
      postal_code?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | string
            | db.Parameter<string>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **address.phone**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      phone?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **address.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "address_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **category**
   * - Table in database
   */
  export namespace category {
    export type Table = "category";
    export interface Selectable {
      /**
       * **category.category_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('category_category_id_seq'::regclass)`
       */
      category_id: number;
      /**
       * **category.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
      /**
       * **category.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
    }
    export interface JSONSelectable {
      /**
       * **category.category_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('category_category_id_seq'::regclass)`
       */
      category_id: number;
      /**
       * **category.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string;
      /**
       * **category.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **category.category_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('category_category_id_seq'::regclass)`
       */
      category_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **category.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **category.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **category.category_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('category_category_id_seq'::regclass)`
       */
      category_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **category.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **category.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **category.category_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('category_category_id_seq'::regclass)`
       */
      category_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **category.name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **category.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "category_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **city**
   * - Table in database
   */
  export namespace city {
    export type Table = "city";
    export interface Selectable {
      /**
       * **city.city_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('city_city_id_seq'::regclass)`
       */
      city_id: number;
      /**
       * **city.city**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      city: string;
      /**
       * **city.country_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      country_id: number;
      /**
       * **city.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
    }
    export interface JSONSelectable {
      /**
       * **city.city_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('city_city_id_seq'::regclass)`
       */
      city_id: number;
      /**
       * **city.city**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      city: string;
      /**
       * **city.country_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      country_id: number;
      /**
       * **city.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **city.city_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('city_city_id_seq'::regclass)`
       */
      city_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **city.city**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      city?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **city.country_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      country_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **city.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **city.city_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('city_city_id_seq'::regclass)`
       */
      city_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
       * **city.city**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      city: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **city.country_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      country_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **city.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **city.city_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('city_city_id_seq'::regclass)`
       */
      city_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **city.city**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      city?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **city.country_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      country_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **city.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "city_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **country**
   * - Table in database
   */
  export namespace country {
    export type Table = "country";
    export interface Selectable {
      /**
       * **country.country_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('country_country_id_seq'::regclass)`
       */
      country_id: number;
      /**
       * **country.country**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      country: string;
      /**
       * **country.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
    }
    export interface JSONSelectable {
      /**
       * **country.country_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('country_country_id_seq'::regclass)`
       */
      country_id: number;
      /**
       * **country.country**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      country: string;
      /**
       * **country.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **country.country_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('country_country_id_seq'::regclass)`
       */
      country_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **country.country**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      country?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **country.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **country.country_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('country_country_id_seq'::regclass)`
       */
      country_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **country.country**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      country: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **country.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **country.country_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('country_country_id_seq'::regclass)`
       */
      country_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **country.country**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      country?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **country.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "country_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **customer**
   * - Table in database
   */
  export namespace customer {
    export type Table = "customer";
    export interface Selectable {
      /**
       * **customer.customer_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('customer_customer_id_seq1'::regclass)`
       */
      customer_id: number;
      /**
       * **customer.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id: number;
      /**
       * **customer.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string;
      /**
       * **customer.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string;
      /**
       * **customer.email**
       * - `text` in database
       * - Nullable, no default
       */
      email: string | null;
      /**
       * **customer.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id: number;
      /**
       * **customer.activebool**
       * - `bool` in database
       * - `NOT NULL`, default: `true`
       */
      activebool: boolean;
      /**
       * **customer.create_date**
       * - `date` in database
       * - `NOT NULL`, default: `('now'::text)::date`
       */
      create_date: Date;
      /**
       * **customer.last_update**
       * - `timestamptz` in database
       * - Nullable, default: `now()`
       */
      last_update: Date | null;
      /**
       * **customer.active**
       * - `int4` in database
       * - Nullable, no default
       */
      active: number | null;
    }
    export interface JSONSelectable {
      /**
       * **customer.customer_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('customer_customer_id_seq1'::regclass)`
       */
      customer_id: number;
      /**
       * **customer.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id: number;
      /**
       * **customer.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string;
      /**
       * **customer.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string;
      /**
       * **customer.email**
       * - `text` in database
       * - Nullable, no default
       */
      email: string | null;
      /**
       * **customer.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id: number;
      /**
       * **customer.activebool**
       * - `bool` in database
       * - `NOT NULL`, default: `true`
       */
      activebool: boolean;
      /**
       * **customer.create_date**
       * - `date` in database
       * - `NOT NULL`, default: `('now'::text)::date`
       */
      create_date: db.DateString;
      /**
       * **customer.last_update**
       * - `timestamptz` in database
       * - Nullable, default: `now()`
       */
      last_update: db.TimestampTzString | null;
      /**
       * **customer.active**
       * - `int4` in database
       * - Nullable, no default
       */
      active: number | null;
    }
    export interface Whereable {
      /**
       * **customer.customer_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('customer_customer_id_seq1'::regclass)`
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer.email**
       * - `text` in database
       * - Nullable, no default
       */
      email?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer.activebool**
       * - `bool` in database
       * - `NOT NULL`, default: `true`
       */
      activebool?:
        | boolean
        | db.Parameter<boolean>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer.create_date**
       * - `date` in database
       * - `NOT NULL`, default: `('now'::text)::date`
       */
      create_date?:
        | (db.DateString | Date)
        | db.Parameter<db.DateString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.DateString | Date)
            | db.Parameter<db.DateString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
      /**
       * **customer.last_update**
       * - `timestamptz` in database
       * - Nullable, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
      /**
       * **customer.active**
       * - `int4` in database
       * - Nullable, no default
       */
      active?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **customer.customer_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('customer_customer_id_seq1'::regclass)`
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **customer.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **customer.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **customer.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **customer.email**
       * - `text` in database
       * - Nullable, no default
       */
      email?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **customer.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **customer.activebool**
       * - `bool` in database
       * - `NOT NULL`, default: `true`
       */
      activebool?:
        | boolean
        | db.Parameter<boolean>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **customer.create_date**
       * - `date` in database
       * - `NOT NULL`, default: `('now'::text)::date`
       */
      create_date?:
        | (db.DateString | Date)
        | db.Parameter<db.DateString | Date>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **customer.last_update**
       * - `timestamptz` in database
       * - Nullable, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **customer.active**
       * - `int4` in database
       * - Nullable, no default
       */
      active?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **customer.customer_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('customer_customer_id_seq1'::regclass)`
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **customer.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **customer.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **customer.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **customer.email**
       * - `text` in database
       * - Nullable, no default
       */
      email?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | string
            | db.Parameter<string>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **customer.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **customer.activebool**
       * - `bool` in database
       * - `NOT NULL`, default: `true`
       */
      activebool?:
        | boolean
        | db.Parameter<boolean>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **customer.create_date**
       * - `date` in database
       * - `NOT NULL`, default: `('now'::text)::date`
       */
      create_date?:
        | (db.DateString | Date)
        | db.Parameter<db.DateString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.DateString | Date)
            | db.Parameter<db.DateString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **customer.last_update**
       * - `timestamptz` in database
       * - Nullable, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **customer.active**
       * - `int4` in database
       * - Nullable, no default
       */
      active?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | number
            | db.Parameter<number>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "customer_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **customer_list**
   * - View in database
   */
  export namespace customer_list {
    export type Table = "customer_list";
    export interface Selectable {
      /**
       * **customer_list.id**
       * - `int4` in database
       * - Nullable, no default
       */
      id: number | null;
      /**
       * **customer_list.name**
       * - `text` in database
       * - Nullable, no default
       */
      name: string | null;
      /**
       * **customer_list.address**
       * - `text` in database
       * - Nullable, no default
       */
      address: string | null;
      /**
       * **customer_list.zip_code**
       * - `text` in database
       * - Nullable, no default
       */
      zip_code: string | null;
      /**
       * **customer_list.phone**
       * - `text` in database
       * - Nullable, no default
       */
      phone: string | null;
      /**
       * **customer_list.city**
       * - `text` in database
       * - Nullable, no default
       */
      city: string | null;
      /**
       * **customer_list.country**
       * - `text` in database
       * - Nullable, no default
       */
      country: string | null;
      /**
       * **customer_list.notes**
       * - `text` in database
       * - Nullable, no default
       */
      notes: string | null;
      /**
       * **customer_list.sid**
       * - `int2` in database
       * - Nullable, no default
       */
      sid: number | null;
    }
    export interface JSONSelectable {
      /**
       * **customer_list.id**
       * - `int4` in database
       * - Nullable, no default
       */
      id: number | null;
      /**
       * **customer_list.name**
       * - `text` in database
       * - Nullable, no default
       */
      name: string | null;
      /**
       * **customer_list.address**
       * - `text` in database
       * - Nullable, no default
       */
      address: string | null;
      /**
       * **customer_list.zip_code**
       * - `text` in database
       * - Nullable, no default
       */
      zip_code: string | null;
      /**
       * **customer_list.phone**
       * - `text` in database
       * - Nullable, no default
       */
      phone: string | null;
      /**
       * **customer_list.city**
       * - `text` in database
       * - Nullable, no default
       */
      city: string | null;
      /**
       * **customer_list.country**
       * - `text` in database
       * - Nullable, no default
       */
      country: string | null;
      /**
       * **customer_list.notes**
       * - `text` in database
       * - Nullable, no default
       */
      notes: string | null;
      /**
       * **customer_list.sid**
       * - `int2` in database
       * - Nullable, no default
       */
      sid: number | null;
    }
    export interface Whereable {
      /**
       * **customer_list.id**
       * - `int4` in database
       * - Nullable, no default
       */
      id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer_list.name**
       * - `text` in database
       * - Nullable, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer_list.address**
       * - `text` in database
       * - Nullable, no default
       */
      address?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer_list.zip_code**
       * - `text` in database
       * - Nullable, no default
       */
      zip_code?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer_list.phone**
       * - `text` in database
       * - Nullable, no default
       */
      phone?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer_list.city**
       * - `text` in database
       * - Nullable, no default
       */
      city?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer_list.country**
       * - `text` in database
       * - Nullable, no default
       */
      country?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer_list.notes**
       * - `text` in database
       * - Nullable, no default
       */
      notes?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **customer_list.sid**
       * - `int2` in database
       * - Nullable, no default
       */
      sid?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **film**
   * - Table in database
   */
  export namespace film {
    export type Table = "film";
    export interface Selectable {
      /**
       * **film.film_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('film_film_id_seq'::regclass)`
       */
      film_id: number;
      /**
       * **film.title**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      title: string;
      /**
       * **film.description**
       * - `text` in database
       * - Nullable, no default
       */
      description: string | null;
      /**
       * **film.release_year**
       * - `year` (base type: `int4`) in database
       * - Nullable, no default
       */
      release_year: c.PgYear | null;
      /**
       * **film.language_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      language_id: number;
      /**
       * **film.original_language_id**
       * - `int2` in database
       * - Nullable, no default
       */
      original_language_id: number | null;
      /**
       * **film.rental_duration**
       * - `int2` in database
       * - `NOT NULL`, default: `3`
       */
      rental_duration: number;
      /**
       * **film.rental_rate**
       * - `numeric` in database
       * - `NOT NULL`, default: `4.99`
       */
      rental_rate: number;
      /**
       * **film.length**
       * - `int2` in database
       * - Nullable, no default
       */
      length: number | null;
      /**
       * **film.replacement_cost**
       * - `numeric` in database
       * - `NOT NULL`, default: `19.99`
       */
      replacement_cost: number;
      /**
       * **film.rating**
       * - `mpaa_rating` in database
       * - Nullable, default: `'G'::mpaa_rating`
       */
      rating: mpaa_rating | null;
      /**
       * **film.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
      /**
       * **film.special_features**
       * - `_text` in database
       * - Nullable, no default
       */
      special_features: string[] | null;
      /**
       * **film.fulltext**
       * - `tsvector` in database
       * - `NOT NULL`, no default
       */
      fulltext: c.PgTsvector;
    }
    export interface JSONSelectable {
      /**
       * **film.film_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('film_film_id_seq'::regclass)`
       */
      film_id: number;
      /**
       * **film.title**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      title: string;
      /**
       * **film.description**
       * - `text` in database
       * - Nullable, no default
       */
      description: string | null;
      /**
       * **film.release_year**
       * - `year` (base type: `int4`) in database
       * - Nullable, no default
       */
      release_year: c.PgYear | null;
      /**
       * **film.language_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      language_id: number;
      /**
       * **film.original_language_id**
       * - `int2` in database
       * - Nullable, no default
       */
      original_language_id: number | null;
      /**
       * **film.rental_duration**
       * - `int2` in database
       * - `NOT NULL`, default: `3`
       */
      rental_duration: number;
      /**
       * **film.rental_rate**
       * - `numeric` in database
       * - `NOT NULL`, default: `4.99`
       */
      rental_rate: number;
      /**
       * **film.length**
       * - `int2` in database
       * - Nullable, no default
       */
      length: number | null;
      /**
       * **film.replacement_cost**
       * - `numeric` in database
       * - `NOT NULL`, default: `19.99`
       */
      replacement_cost: number;
      /**
       * **film.rating**
       * - `mpaa_rating` in database
       * - Nullable, default: `'G'::mpaa_rating`
       */
      rating: mpaa_rating | null;
      /**
       * **film.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
      /**
       * **film.special_features**
       * - `_text` in database
       * - Nullable, no default
       */
      special_features: string[] | null;
      /**
       * **film.fulltext**
       * - `tsvector` in database
       * - `NOT NULL`, no default
       */
      fulltext: c.PgTsvector;
    }
    export interface Whereable {
      /**
       * **film.film_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('film_film_id_seq'::regclass)`
       */
      film_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film.title**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      title?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film.description**
       * - `text` in database
       * - Nullable, no default
       */
      description?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film.release_year**
       * - `year` (base type: `int4`) in database
       * - Nullable, no default
       */
      release_year?:
        | c.PgYear
        | db.Parameter<c.PgYear>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            c.PgYear | db.Parameter<c.PgYear> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film.language_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      language_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film.original_language_id**
       * - `int2` in database
       * - Nullable, no default
       */
      original_language_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film.rental_duration**
       * - `int2` in database
       * - `NOT NULL`, default: `3`
       */
      rental_duration?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film.rental_rate**
       * - `numeric` in database
       * - `NOT NULL`, default: `4.99`
       */
      rental_rate?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film.length**
       * - `int2` in database
       * - Nullable, no default
       */
      length?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film.replacement_cost**
       * - `numeric` in database
       * - `NOT NULL`, default: `19.99`
       */
      replacement_cost?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film.rating**
       * - `mpaa_rating` in database
       * - Nullable, default: `'G'::mpaa_rating`
       */
      rating?:
        | mpaa_rating
        | db.Parameter<mpaa_rating>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | mpaa_rating
            | db.Parameter<mpaa_rating>
            | db.SQLFragment
            | db.ParentColumn
          >;
      /**
       * **film.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
      /**
       * **film.special_features**
       * - `_text` in database
       * - Nullable, no default
       */
      special_features?:
        | string[]
        | db.Parameter<string[]>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film.fulltext**
       * - `tsvector` in database
       * - `NOT NULL`, no default
       */
      fulltext?:
        | c.PgTsvector
        | db.Parameter<c.PgTsvector>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | c.PgTsvector
            | db.Parameter<c.PgTsvector>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **film.film_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('film_film_id_seq'::regclass)`
       */
      film_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
       * **film.title**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **film.description**
       * - `text` in database
       * - Nullable, no default
       */
      description?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **film.release_year**
       * - `year` (base type: `int4`) in database
       * - Nullable, no default
       */
      release_year?:
        | c.PgYear
        | db.Parameter<c.PgYear>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **film.language_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      language_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **film.original_language_id**
       * - `int2` in database
       * - Nullable, no default
       */
      original_language_id?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **film.rental_duration**
       * - `int2` in database
       * - `NOT NULL`, default: `3`
       */
      rental_duration?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **film.rental_rate**
       * - `numeric` in database
       * - `NOT NULL`, default: `4.99`
       */
      rental_rate?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **film.length**
       * - `int2` in database
       * - Nullable, no default
       */
      length?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **film.replacement_cost**
       * - `numeric` in database
       * - `NOT NULL`, default: `19.99`
       */
      replacement_cost?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **film.rating**
       * - `mpaa_rating` in database
       * - Nullable, default: `'G'::mpaa_rating`
       */
      rating?:
        | mpaa_rating
        | db.Parameter<mpaa_rating>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **film.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **film.special_features**
       * - `_text` in database
       * - Nullable, no default
       */
      special_features?:
        | string[]
        | db.Parameter<string[]>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **film.fulltext**
       * - `tsvector` in database
       * - `NOT NULL`, no default
       */
      fulltext: c.PgTsvector | db.Parameter<c.PgTsvector> | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **film.film_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('film_film_id_seq'::regclass)`
       */
      film_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **film.title**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      title?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **film.description**
       * - `text` in database
       * - Nullable, no default
       */
      description?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | string
            | db.Parameter<string>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **film.release_year**
       * - `year` (base type: `int4`) in database
       * - Nullable, no default
       */
      release_year?:
        | c.PgYear
        | db.Parameter<c.PgYear>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | c.PgYear
            | db.Parameter<c.PgYear>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **film.language_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      language_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **film.original_language_id**
       * - `int2` in database
       * - Nullable, no default
       */
      original_language_id?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | number
            | db.Parameter<number>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **film.rental_duration**
       * - `int2` in database
       * - `NOT NULL`, default: `3`
       */
      rental_duration?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **film.rental_rate**
       * - `numeric` in database
       * - `NOT NULL`, default: `4.99`
       */
      rental_rate?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **film.length**
       * - `int2` in database
       * - Nullable, no default
       */
      length?:
        | number
        | db.Parameter<number>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | number
            | db.Parameter<number>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **film.replacement_cost**
       * - `numeric` in database
       * - `NOT NULL`, default: `19.99`
       */
      replacement_cost?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **film.rating**
       * - `mpaa_rating` in database
       * - Nullable, default: `'G'::mpaa_rating`
       */
      rating?:
        | mpaa_rating
        | db.Parameter<mpaa_rating>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | mpaa_rating
            | db.Parameter<mpaa_rating>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **film.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **film.special_features**
       * - `_text` in database
       * - Nullable, no default
       */
      special_features?:
        | string[]
        | db.Parameter<string[]>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | string[]
            | db.Parameter<string[]>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **film.fulltext**
       * - `tsvector` in database
       * - `NOT NULL`, no default
       */
      fulltext?:
        | c.PgTsvector
        | db.Parameter<c.PgTsvector>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            c.PgTsvector | db.Parameter<c.PgTsvector> | db.SQLFragment
          >;
    }
    export type UniqueIndex = "film_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **film_actor**
   * - Table in database
   */
  export namespace film_actor {
    export type Table = "film_actor";
    export interface Selectable {
      /**
       * **film_actor.actor_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      actor_id: number;
      /**
       * **film_actor.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id: number;
      /**
       * **film_actor.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
    }
    export interface JSONSelectable {
      /**
       * **film_actor.actor_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      actor_id: number;
      /**
       * **film_actor.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id: number;
      /**
       * **film_actor.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **film_actor.actor_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      actor_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film_actor.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film_actor.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **film_actor.actor_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      actor_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **film_actor.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **film_actor.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **film_actor.actor_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      actor_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **film_actor.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **film_actor.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "film_actor_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **film_category**
   * - Table in database
   */
  export namespace film_category {
    export type Table = "film_category";
    export interface Selectable {
      /**
       * **film_category.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id: number;
      /**
       * **film_category.category_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      category_id: number;
      /**
       * **film_category.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
    }
    export interface JSONSelectable {
      /**
       * **film_category.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id: number;
      /**
       * **film_category.category_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      category_id: number;
      /**
       * **film_category.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **film_category.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film_category.category_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      category_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film_category.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **film_category.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **film_category.category_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      category_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **film_category.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **film_category.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **film_category.category_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      category_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **film_category.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "film_category_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **film_list**
   * - View in database
   */
  export namespace film_list {
    export type Table = "film_list";
    export interface Selectable {
      /**
       * **film_list.fid**
       * - `int4` in database
       * - Nullable, no default
       */
      fid: number | null;
      /**
       * **film_list.title**
       * - `text` in database
       * - Nullable, no default
       */
      title: string | null;
      /**
       * **film_list.description**
       * - `text` in database
       * - Nullable, no default
       */
      description: string | null;
      /**
       * **film_list.category**
       * - `text` in database
       * - Nullable, no default
       */
      category: string | null;
      /**
       * **film_list.price**
       * - `numeric` in database
       * - Nullable, no default
       */
      price: number | null;
      /**
       * **film_list.length**
       * - `int2` in database
       * - Nullable, no default
       */
      length: number | null;
      /**
       * **film_list.rating**
       * - `mpaa_rating` in database
       * - Nullable, no default
       */
      rating: mpaa_rating | null;
      /**
       * **film_list.actors**
       * - `text` in database
       * - Nullable, no default
       */
      actors: string | null;
    }
    export interface JSONSelectable {
      /**
       * **film_list.fid**
       * - `int4` in database
       * - Nullable, no default
       */
      fid: number | null;
      /**
       * **film_list.title**
       * - `text` in database
       * - Nullable, no default
       */
      title: string | null;
      /**
       * **film_list.description**
       * - `text` in database
       * - Nullable, no default
       */
      description: string | null;
      /**
       * **film_list.category**
       * - `text` in database
       * - Nullable, no default
       */
      category: string | null;
      /**
       * **film_list.price**
       * - `numeric` in database
       * - Nullable, no default
       */
      price: number | null;
      /**
       * **film_list.length**
       * - `int2` in database
       * - Nullable, no default
       */
      length: number | null;
      /**
       * **film_list.rating**
       * - `mpaa_rating` in database
       * - Nullable, no default
       */
      rating: mpaa_rating | null;
      /**
       * **film_list.actors**
       * - `text` in database
       * - Nullable, no default
       */
      actors: string | null;
    }
    export interface Whereable {
      /**
       * **film_list.fid**
       * - `int4` in database
       * - Nullable, no default
       */
      fid?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film_list.title**
       * - `text` in database
       * - Nullable, no default
       */
      title?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film_list.description**
       * - `text` in database
       * - Nullable, no default
       */
      description?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film_list.category**
       * - `text` in database
       * - Nullable, no default
       */
      category?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film_list.price**
       * - `numeric` in database
       * - Nullable, no default
       */
      price?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film_list.length**
       * - `int2` in database
       * - Nullable, no default
       */
      length?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **film_list.rating**
       * - `mpaa_rating` in database
       * - Nullable, no default
       */
      rating?:
        | mpaa_rating
        | db.Parameter<mpaa_rating>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | mpaa_rating
            | db.Parameter<mpaa_rating>
            | db.SQLFragment
            | db.ParentColumn
          >;
      /**
       * **film_list.actors**
       * - `text` in database
       * - Nullable, no default
       */
      actors?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **inventory**
   * - Table in database
   */
  export namespace inventory {
    export type Table = "inventory";
    export interface Selectable {
      /**
       * **inventory.inventory_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('inventory_inventory_id_seq'::regclass)`
       */
      inventory_id: number;
      /**
       * **inventory.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id: number;
      /**
       * **inventory.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id: number;
      /**
       * **inventory.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
    }
    export interface JSONSelectable {
      /**
       * **inventory.inventory_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('inventory_inventory_id_seq'::regclass)`
       */
      inventory_id: number;
      /**
       * **inventory.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id: number;
      /**
       * **inventory.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id: number;
      /**
       * **inventory.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **inventory.inventory_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('inventory_inventory_id_seq'::regclass)`
       */
      inventory_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **inventory.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **inventory.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **inventory.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **inventory.inventory_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('inventory_inventory_id_seq'::regclass)`
       */
      inventory_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **inventory.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **inventory.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **inventory.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **inventory.inventory_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('inventory_inventory_id_seq'::regclass)`
       */
      inventory_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **inventory.film_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      film_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **inventory.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **inventory.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "inventory_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **language**
   * - Table in database
   */
  export namespace language {
    export type Table = "language";
    export interface Selectable {
      /**
       * **language.language_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('language_language_id_seq'::regclass)`
       */
      language_id: number;
      /**
       * **language.name**
       * - `bpchar` in database
       * - `NOT NULL`, no default
       */
      name: string;
      /**
       * **language.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
    }
    export interface JSONSelectable {
      /**
       * **language.language_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('language_language_id_seq'::regclass)`
       */
      language_id: number;
      /**
       * **language.name**
       * - `bpchar` in database
       * - `NOT NULL`, no default
       */
      name: string;
      /**
       * **language.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **language.language_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('language_language_id_seq'::regclass)`
       */
      language_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **language.name**
       * - `bpchar` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **language.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **language.language_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('language_language_id_seq'::regclass)`
       */
      language_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **language.name**
       * - `bpchar` in database
       * - `NOT NULL`, no default
       */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **language.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **language.language_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('language_language_id_seq'::regclass)`
       */
      language_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **language.name**
       * - `bpchar` in database
       * - `NOT NULL`, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **language.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "language_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **nicer_but_slower_film_list**
   * - View in database
   */
  export namespace nicer_but_slower_film_list {
    export type Table = "nicer_but_slower_film_list";
    export interface Selectable {
      /**
       * **nicer_but_slower_film_list.fid**
       * - `int4` in database
       * - Nullable, no default
       */
      fid: number | null;
      /**
       * **nicer_but_slower_film_list.title**
       * - `text` in database
       * - Nullable, no default
       */
      title: string | null;
      /**
       * **nicer_but_slower_film_list.description**
       * - `text` in database
       * - Nullable, no default
       */
      description: string | null;
      /**
       * **nicer_but_slower_film_list.category**
       * - `text` in database
       * - Nullable, no default
       */
      category: string | null;
      /**
       * **nicer_but_slower_film_list.price**
       * - `numeric` in database
       * - Nullable, no default
       */
      price: number | null;
      /**
       * **nicer_but_slower_film_list.length**
       * - `int2` in database
       * - Nullable, no default
       */
      length: number | null;
      /**
       * **nicer_but_slower_film_list.rating**
       * - `mpaa_rating` in database
       * - Nullable, no default
       */
      rating: mpaa_rating | null;
      /**
       * **nicer_but_slower_film_list.actors**
       * - `text` in database
       * - Nullable, no default
       */
      actors: string | null;
    }
    export interface JSONSelectable {
      /**
       * **nicer_but_slower_film_list.fid**
       * - `int4` in database
       * - Nullable, no default
       */
      fid: number | null;
      /**
       * **nicer_but_slower_film_list.title**
       * - `text` in database
       * - Nullable, no default
       */
      title: string | null;
      /**
       * **nicer_but_slower_film_list.description**
       * - `text` in database
       * - Nullable, no default
       */
      description: string | null;
      /**
       * **nicer_but_slower_film_list.category**
       * - `text` in database
       * - Nullable, no default
       */
      category: string | null;
      /**
       * **nicer_but_slower_film_list.price**
       * - `numeric` in database
       * - Nullable, no default
       */
      price: number | null;
      /**
       * **nicer_but_slower_film_list.length**
       * - `int2` in database
       * - Nullable, no default
       */
      length: number | null;
      /**
       * **nicer_but_slower_film_list.rating**
       * - `mpaa_rating` in database
       * - Nullable, no default
       */
      rating: mpaa_rating | null;
      /**
       * **nicer_but_slower_film_list.actors**
       * - `text` in database
       * - Nullable, no default
       */
      actors: string | null;
    }
    export interface Whereable {
      /**
       * **nicer_but_slower_film_list.fid**
       * - `int4` in database
       * - Nullable, no default
       */
      fid?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **nicer_but_slower_film_list.title**
       * - `text` in database
       * - Nullable, no default
       */
      title?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **nicer_but_slower_film_list.description**
       * - `text` in database
       * - Nullable, no default
       */
      description?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **nicer_but_slower_film_list.category**
       * - `text` in database
       * - Nullable, no default
       */
      category?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **nicer_but_slower_film_list.price**
       * - `numeric` in database
       * - Nullable, no default
       */
      price?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **nicer_but_slower_film_list.length**
       * - `int2` in database
       * - Nullable, no default
       */
      length?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **nicer_but_slower_film_list.rating**
       * - `mpaa_rating` in database
       * - Nullable, no default
       */
      rating?:
        | mpaa_rating
        | db.Parameter<mpaa_rating>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | mpaa_rating
            | db.Parameter<mpaa_rating>
            | db.SQLFragment
            | db.ParentColumn
          >;
      /**
       * **nicer_but_slower_film_list.actors**
       * - `text` in database
       * - Nullable, no default
       */
      actors?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **payment**
   * - Table in database
   */
  export namespace payment {
    export type Table = "payment";
    export interface Selectable {
      /**
       * **payment.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: Date;
    }
    export interface JSONSelectable {
      /**
       * **payment.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **payment.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **payment.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **payment.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **payment.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **payment.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **payment_p2020_01**
   * - Table in database
   */
  export namespace payment_p2020_01 {
    export type Table = "payment_p2020_01";
    export interface Selectable {
      /**
       * **payment_p2020_01.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_01.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_01.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_01.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_01.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_01.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: Date;
    }
    export interface JSONSelectable {
      /**
       * **payment_p2020_01.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_01.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_01.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_01.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_01.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_01.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **payment_p2020_01.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_01.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_01.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_01.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_01.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_01.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **payment_p2020_01.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **payment_p2020_01.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_01.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_01.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_01.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_01.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **payment_p2020_01.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **payment_p2020_01.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_01.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_01.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_01.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_01.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **payment_p2020_02**
   * - Table in database
   */
  export namespace payment_p2020_02 {
    export type Table = "payment_p2020_02";
    export interface Selectable {
      /**
       * **payment_p2020_02.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_02.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_02.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_02.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_02.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_02.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: Date;
    }
    export interface JSONSelectable {
      /**
       * **payment_p2020_02.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_02.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_02.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_02.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_02.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_02.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **payment_p2020_02.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_02.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_02.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_02.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_02.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_02.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **payment_p2020_02.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **payment_p2020_02.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_02.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_02.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_02.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_02.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **payment_p2020_02.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **payment_p2020_02.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_02.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_02.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_02.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_02.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **payment_p2020_03**
   * - Table in database
   */
  export namespace payment_p2020_03 {
    export type Table = "payment_p2020_03";
    export interface Selectable {
      /**
       * **payment_p2020_03.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_03.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_03.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_03.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_03.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_03.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: Date;
    }
    export interface JSONSelectable {
      /**
       * **payment_p2020_03.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_03.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_03.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_03.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_03.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_03.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **payment_p2020_03.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_03.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_03.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_03.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_03.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_03.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **payment_p2020_03.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **payment_p2020_03.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_03.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_03.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_03.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_03.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **payment_p2020_03.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **payment_p2020_03.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_03.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_03.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_03.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_03.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **payment_p2020_04**
   * - Table in database
   */
  export namespace payment_p2020_04 {
    export type Table = "payment_p2020_04";
    export interface Selectable {
      /**
       * **payment_p2020_04.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_04.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_04.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_04.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_04.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_04.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: Date;
    }
    export interface JSONSelectable {
      /**
       * **payment_p2020_04.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_04.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_04.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_04.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_04.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_04.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **payment_p2020_04.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_04.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_04.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_04.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_04.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_04.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **payment_p2020_04.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **payment_p2020_04.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_04.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_04.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_04.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_04.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **payment_p2020_04.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **payment_p2020_04.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_04.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_04.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_04.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_04.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **payment_p2020_05**
   * - Table in database
   */
  export namespace payment_p2020_05 {
    export type Table = "payment_p2020_05";
    export interface Selectable {
      /**
       * **payment_p2020_05.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_05.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_05.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_05.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_05.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_05.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: Date;
    }
    export interface JSONSelectable {
      /**
       * **payment_p2020_05.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_05.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_05.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_05.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_05.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_05.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **payment_p2020_05.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_05.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_05.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_05.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_05.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_05.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **payment_p2020_05.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **payment_p2020_05.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_05.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_05.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_05.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_05.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **payment_p2020_05.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **payment_p2020_05.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_05.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_05.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_05.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_05.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **payment_p2020_06**
   * - Table in database
   */
  export namespace payment_p2020_06 {
    export type Table = "payment_p2020_06";
    export interface Selectable {
      /**
       * **payment_p2020_06.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_06.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_06.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_06.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_06.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_06.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: Date;
    }
    export interface JSONSelectable {
      /**
       * **payment_p2020_06.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id: number;
      /**
       * **payment_p2020_06.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **payment_p2020_06.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **payment_p2020_06.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number;
      /**
       * **payment_p2020_06.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number;
      /**
       * **payment_p2020_06.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **payment_p2020_06.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_06.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_06.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_06.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_06.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **payment_p2020_06.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **payment_p2020_06.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **payment_p2020_06.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_06.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_06.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_06.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **payment_p2020_06.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **payment_p2020_06.payment_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('payment_payment_id_seq'::regclass)`
       */
      payment_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **payment_p2020_06.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_06.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_06.rental_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_06.amount**
       * - `numeric` in database
       * - `NOT NULL`, no default
       */
      amount?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **payment_p2020_06.payment_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      payment_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **rental**
   * - Table in database
   */
  export namespace rental {
    export type Table = "rental";
    export interface Selectable {
      /**
       * **rental.rental_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('rental_rental_id_seq'::regclass)`
       */
      rental_id: number;
      /**
       * **rental.rental_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      rental_date: Date;
      /**
       * **rental.inventory_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      inventory_id: number;
      /**
       * **rental.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **rental.return_date**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      return_date: Date | null;
      /**
       * **rental.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **rental.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
    }
    export interface JSONSelectable {
      /**
       * **rental.rental_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('rental_rental_id_seq'::regclass)`
       */
      rental_id: number;
      /**
       * **rental.rental_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      rental_date: db.TimestampTzString;
      /**
       * **rental.inventory_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      inventory_id: number;
      /**
       * **rental.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number;
      /**
       * **rental.return_date**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      return_date: db.TimestampTzString | null;
      /**
       * **rental.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number;
      /**
       * **rental.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **rental.rental_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('rental_rental_id_seq'::regclass)`
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **rental.rental_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      rental_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
      /**
       * **rental.inventory_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      inventory_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **rental.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **rental.return_date**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      return_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
      /**
       * **rental.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **rental.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **rental.rental_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('rental_rental_id_seq'::regclass)`
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **rental.rental_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      rental_date:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment;
      /**
       * **rental.inventory_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      inventory_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **rental.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **rental.return_date**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      return_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **rental.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **rental.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **rental.rental_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('rental_rental_id_seq'::regclass)`
       */
      rental_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **rental.rental_date**
       * - `timestamptz` in database
       * - `NOT NULL`, no default
       */
      rental_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
          >;
      /**
       * **rental.inventory_id**
       * - `int4` in database
       * - `NOT NULL`, no default
       */
      inventory_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **rental.customer_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      customer_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **rental.return_date**
       * - `timestamptz` in database
       * - Nullable, no default
       */
      return_date?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **rental.staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **rental.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex =
      | "idx_unq_rental_rental_date_inventory_id_customer_id"
      | "rental_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **sales_by_film_category**
   * - View in database
   */
  export namespace sales_by_film_category {
    export type Table = "sales_by_film_category";
    export interface Selectable {
      /**
       * **sales_by_film_category.category**
       * - `text` in database
       * - Nullable, no default
       */
      category: string | null;
      /**
       * **sales_by_film_category.total_sales**
       * - `numeric` in database
       * - Nullable, no default
       */
      total_sales: number | null;
    }
    export interface JSONSelectable {
      /**
       * **sales_by_film_category.category**
       * - `text` in database
       * - Nullable, no default
       */
      category: string | null;
      /**
       * **sales_by_film_category.total_sales**
       * - `numeric` in database
       * - Nullable, no default
       */
      total_sales: number | null;
    }
    export interface Whereable {
      /**
       * **sales_by_film_category.category**
       * - `text` in database
       * - Nullable, no default
       */
      category?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **sales_by_film_category.total_sales**
       * - `numeric` in database
       * - Nullable, no default
       */
      total_sales?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **sales_by_store**
   * - View in database
   */
  export namespace sales_by_store {
    export type Table = "sales_by_store";
    export interface Selectable {
      /**
       * **sales_by_store.store**
       * - `text` in database
       * - Nullable, no default
       */
      store: string | null;
      /**
       * **sales_by_store.manager**
       * - `text` in database
       * - Nullable, no default
       */
      manager: string | null;
      /**
       * **sales_by_store.total_sales**
       * - `numeric` in database
       * - Nullable, no default
       */
      total_sales: number | null;
    }
    export interface JSONSelectable {
      /**
       * **sales_by_store.store**
       * - `text` in database
       * - Nullable, no default
       */
      store: string | null;
      /**
       * **sales_by_store.manager**
       * - `text` in database
       * - Nullable, no default
       */
      manager: string | null;
      /**
       * **sales_by_store.total_sales**
       * - `numeric` in database
       * - Nullable, no default
       */
      total_sales: number | null;
    }
    export interface Whereable {
      /**
       * **sales_by_store.store**
       * - `text` in database
       * - Nullable, no default
       */
      store?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **sales_by_store.manager**
       * - `text` in database
       * - Nullable, no default
       */
      manager?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **sales_by_store.total_sales**
       * - `numeric` in database
       * - Nullable, no default
       */
      total_sales?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **staff**
   * - Table in database
   */
  export namespace staff {
    export type Table = "staff";
    export interface Selectable {
      /**
       * **staff.staff_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('staff_staff_id_seq'::regclass)`
       */
      staff_id: number;
      /**
       * **staff.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string;
      /**
       * **staff.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string;
      /**
       * **staff.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id: number;
      /**
       * **staff.email**
       * - `text` in database
       * - Nullable, no default
       */
      email: string | null;
      /**
       * **staff.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id: number;
      /**
       * **staff.active**
       * - `bool` in database
       * - `NOT NULL`, default: `true`
       */
      active: boolean;
      /**
       * **staff.username**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      username: string;
      /**
       * **staff.password**
       * - `text` in database
       * - Nullable, no default
       */
      password: string | null;
      /**
       * **staff.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
      /**
       * **staff.picture**
       * - `bytea` in database
       * - Nullable, no default
       */
      picture: Buffer | null;
    }
    export interface JSONSelectable {
      /**
       * **staff.staff_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('staff_staff_id_seq'::regclass)`
       */
      staff_id: number;
      /**
       * **staff.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string;
      /**
       * **staff.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string;
      /**
       * **staff.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id: number;
      /**
       * **staff.email**
       * - `text` in database
       * - Nullable, no default
       */
      email: string | null;
      /**
       * **staff.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id: number;
      /**
       * **staff.active**
       * - `bool` in database
       * - `NOT NULL`, default: `true`
       */
      active: boolean;
      /**
       * **staff.username**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      username: string;
      /**
       * **staff.password**
       * - `text` in database
       * - Nullable, no default
       */
      password: string | null;
      /**
       * **staff.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
      /**
       * **staff.picture**
       * - `bytea` in database
       * - Nullable, no default
       */
      picture: db.ByteArrayString | null;
    }
    export interface Whereable {
      /**
       * **staff.staff_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('staff_staff_id_seq'::regclass)`
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff.email**
       * - `text` in database
       * - Nullable, no default
       */
      email?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff.active**
       * - `bool` in database
       * - `NOT NULL`, default: `true`
       */
      active?:
        | boolean
        | db.Parameter<boolean>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff.username**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      username?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff.password**
       * - `text` in database
       * - Nullable, no default
       */
      password?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
      /**
       * **staff.picture**
       * - `bytea` in database
       * - Nullable, no default
       */
      picture?:
        | (db.ByteArrayString | Buffer)
        | db.Parameter<db.ByteArrayString | Buffer>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.ByteArrayString | Buffer)
            | db.Parameter<db.ByteArrayString | Buffer>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **staff.staff_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('staff_staff_id_seq'::regclass)`
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **staff.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **staff.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **staff.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **staff.email**
       * - `text` in database
       * - Nullable, no default
       */
      email?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **staff.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **staff.active**
       * - `bool` in database
       * - `NOT NULL`, default: `true`
       */
      active?:
        | boolean
        | db.Parameter<boolean>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **staff.username**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      username: string | db.Parameter<string> | db.SQLFragment;
      /**
       * **staff.password**
       * - `text` in database
       * - Nullable, no default
       */
      password?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **staff.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **staff.picture**
       * - `bytea` in database
       * - Nullable, no default
       */
      picture?:
        | (db.ByteArrayString | Buffer)
        | db.Parameter<db.ByteArrayString | Buffer>
        | null
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **staff.staff_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('staff_staff_id_seq'::regclass)`
       */
      staff_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **staff.first_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      first_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **staff.last_name**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      last_name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **staff.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **staff.email**
       * - `text` in database
       * - Nullable, no default
       */
      email?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | string
            | db.Parameter<string>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **staff.store_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      store_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **staff.active**
       * - `bool` in database
       * - `NOT NULL`, default: `true`
       */
      active?:
        | boolean
        | db.Parameter<boolean>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **staff.username**
       * - `text` in database
       * - `NOT NULL`, no default
       */
      username?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
       * **staff.password**
       * - `text` in database
       * - Nullable, no default
       */
      password?:
        | string
        | db.Parameter<string>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | string
            | db.Parameter<string>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **staff.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
      /**
       * **staff.picture**
       * - `bytea` in database
       * - Nullable, no default
       */
      picture?:
        | (db.ByteArrayString | Buffer)
        | db.Parameter<db.ByteArrayString | Buffer>
        | null
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.ByteArrayString | Buffer)
            | db.Parameter<db.ByteArrayString | Buffer>
            | null
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "staff_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **staff_list**
   * - View in database
   */
  export namespace staff_list {
    export type Table = "staff_list";
    export interface Selectable {
      /**
       * **staff_list.id**
       * - `int4` in database
       * - Nullable, no default
       */
      id: number | null;
      /**
       * **staff_list.name**
       * - `text` in database
       * - Nullable, no default
       */
      name: string | null;
      /**
       * **staff_list.address**
       * - `text` in database
       * - Nullable, no default
       */
      address: string | null;
      /**
       * **staff_list.zip_code**
       * - `text` in database
       * - Nullable, no default
       */
      zip_code: string | null;
      /**
       * **staff_list.phone**
       * - `text` in database
       * - Nullable, no default
       */
      phone: string | null;
      /**
       * **staff_list.city**
       * - `text` in database
       * - Nullable, no default
       */
      city: string | null;
      /**
       * **staff_list.country**
       * - `text` in database
       * - Nullable, no default
       */
      country: string | null;
      /**
       * **staff_list.sid**
       * - `int2` in database
       * - Nullable, no default
       */
      sid: number | null;
    }
    export interface JSONSelectable {
      /**
       * **staff_list.id**
       * - `int4` in database
       * - Nullable, no default
       */
      id: number | null;
      /**
       * **staff_list.name**
       * - `text` in database
       * - Nullable, no default
       */
      name: string | null;
      /**
       * **staff_list.address**
       * - `text` in database
       * - Nullable, no default
       */
      address: string | null;
      /**
       * **staff_list.zip_code**
       * - `text` in database
       * - Nullable, no default
       */
      zip_code: string | null;
      /**
       * **staff_list.phone**
       * - `text` in database
       * - Nullable, no default
       */
      phone: string | null;
      /**
       * **staff_list.city**
       * - `text` in database
       * - Nullable, no default
       */
      city: string | null;
      /**
       * **staff_list.country**
       * - `text` in database
       * - Nullable, no default
       */
      country: string | null;
      /**
       * **staff_list.sid**
       * - `int2` in database
       * - Nullable, no default
       */
      sid: number | null;
    }
    export interface Whereable {
      /**
       * **staff_list.id**
       * - `int4` in database
       * - Nullable, no default
       */
      id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff_list.name**
       * - `text` in database
       * - Nullable, no default
       */
      name?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff_list.address**
       * - `text` in database
       * - Nullable, no default
       */
      address?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff_list.zip_code**
       * - `text` in database
       * - Nullable, no default
       */
      zip_code?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff_list.phone**
       * - `text` in database
       * - Nullable, no default
       */
      phone?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff_list.city**
       * - `text` in database
       * - Nullable, no default
       */
      city?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff_list.country**
       * - `text` in database
       * - Nullable, no default
       */
      country?:
        | string
        | db.Parameter<string>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **staff_list.sid**
       * - `int2` in database
       * - Nullable, no default
       */
      sid?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **store**
   * - Table in database
   */
  export namespace store {
    export type Table = "store";
    export interface Selectable {
      /**
       * **store.store_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('store_store_id_seq'::regclass)`
       */
      store_id: number;
      /**
       * **store.manager_staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      manager_staff_id: number;
      /**
       * **store.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id: number;
      /**
       * **store.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: Date;
    }
    export interface JSONSelectable {
      /**
       * **store.store_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('store_store_id_seq'::regclass)`
       */
      store_id: number;
      /**
       * **store.manager_staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      manager_staff_id: number;
      /**
       * **store.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id: number;
      /**
       * **store.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update: db.TimestampTzString;
    }
    export interface Whereable {
      /**
       * **store.store_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('store_store_id_seq'::regclass)`
       */
      store_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **store.manager_staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      manager_staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **store.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
          >;
      /**
       * **store.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.SQLFragment
        | db.ParentColumn
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.SQLFragment
            | db.ParentColumn
          >;
    }
    export interface Insertable {
      /**
       * **store.store_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('store_store_id_seq'::regclass)`
       */
      store_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment;
      /**
       * **store.manager_staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      manager_staff_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **store.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id: number | db.Parameter<number> | db.SQLFragment;
      /**
       * **store.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment;
    }
    export interface Updatable {
      /**
       * **store.store_id**
       * - `int4` in database
       * - `NOT NULL`, default: `nextval('store_store_id_seq'::regclass)`
       */
      store_id?:
        | number
        | db.Parameter<number>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            number | db.Parameter<number> | db.DefaultType | db.SQLFragment
          >;
      /**
       * **store.manager_staff_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      manager_staff_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **store.address_id**
       * - `int2` in database
       * - `NOT NULL`, no default
       */
      address_id?:
        | number
        | db.Parameter<number>
        | db.SQLFragment
        | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
       * **store.last_update**
       * - `timestamptz` in database
       * - `NOT NULL`, default: `now()`
       */
      last_update?:
        | (db.TimestampTzString | Date)
        | db.Parameter<db.TimestampTzString | Date>
        | db.DefaultType
        | db.SQLFragment
        | db.SQLFragment<
            any,
            | (db.TimestampTzString | Date)
            | db.Parameter<db.TimestampTzString | Date>
            | db.DefaultType
            | db.SQLFragment
          >;
    }
    export type UniqueIndex = "idx_unq_manager_staff_id" | "store_pkey";
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<
      Selectable,
      T[number]
    >;
    export type SQLExpression =
      | Table
      | db.ColumnNames<Updatable | (keyof Updatable)[]>
      | db.ColumnValues<Updatable>
      | Whereable
      | Column
      | db.ParentColumn
      | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {
    export type Table =
      | actor.Table
      | actor_info.Table
      | address.Table
      | category.Table
      | city.Table
      | country.Table
      | customer.Table
      | customer_list.Table
      | film.Table
      | film_actor.Table
      | film_category.Table
      | film_list.Table
      | inventory.Table
      | language.Table
      | nicer_but_slower_film_list.Table
      | payment.Table
      | payment_p2020_01.Table
      | payment_p2020_02.Table
      | payment_p2020_03.Table
      | payment_p2020_04.Table
      | payment_p2020_05.Table
      | payment_p2020_06.Table
      | rental.Table
      | sales_by_film_category.Table
      | sales_by_store.Table
      | staff.Table
      | staff_list.Table
      | store.Table;
    export type Selectable =
      | actor.Selectable
      | actor_info.Selectable
      | address.Selectable
      | category.Selectable
      | city.Selectable
      | country.Selectable
      | customer.Selectable
      | customer_list.Selectable
      | film.Selectable
      | film_actor.Selectable
      | film_category.Selectable
      | film_list.Selectable
      | inventory.Selectable
      | language.Selectable
      | nicer_but_slower_film_list.Selectable
      | payment.Selectable
      | payment_p2020_01.Selectable
      | payment_p2020_02.Selectable
      | payment_p2020_03.Selectable
      | payment_p2020_04.Selectable
      | payment_p2020_05.Selectable
      | payment_p2020_06.Selectable
      | rental.Selectable
      | sales_by_film_category.Selectable
      | sales_by_store.Selectable
      | staff.Selectable
      | staff_list.Selectable
      | store.Selectable;
    export type JSONSelectable =
      | actor.JSONSelectable
      | actor_info.JSONSelectable
      | address.JSONSelectable
      | category.JSONSelectable
      | city.JSONSelectable
      | country.JSONSelectable
      | customer.JSONSelectable
      | customer_list.JSONSelectable
      | film.JSONSelectable
      | film_actor.JSONSelectable
      | film_category.JSONSelectable
      | film_list.JSONSelectable
      | inventory.JSONSelectable
      | language.JSONSelectable
      | nicer_but_slower_film_list.JSONSelectable
      | payment.JSONSelectable
      | payment_p2020_01.JSONSelectable
      | payment_p2020_02.JSONSelectable
      | payment_p2020_03.JSONSelectable
      | payment_p2020_04.JSONSelectable
      | payment_p2020_05.JSONSelectable
      | payment_p2020_06.JSONSelectable
      | rental.JSONSelectable
      | sales_by_film_category.JSONSelectable
      | sales_by_store.JSONSelectable
      | staff.JSONSelectable
      | staff_list.JSONSelectable
      | store.JSONSelectable;
    export type Whereable =
      | actor.Whereable
      | actor_info.Whereable
      | address.Whereable
      | category.Whereable
      | city.Whereable
      | country.Whereable
      | customer.Whereable
      | customer_list.Whereable
      | film.Whereable
      | film_actor.Whereable
      | film_category.Whereable
      | film_list.Whereable
      | inventory.Whereable
      | language.Whereable
      | nicer_but_slower_film_list.Whereable
      | payment.Whereable
      | payment_p2020_01.Whereable
      | payment_p2020_02.Whereable
      | payment_p2020_03.Whereable
      | payment_p2020_04.Whereable
      | payment_p2020_05.Whereable
      | payment_p2020_06.Whereable
      | rental.Whereable
      | sales_by_film_category.Whereable
      | sales_by_store.Whereable
      | staff.Whereable
      | staff_list.Whereable
      | store.Whereable;
    export type Insertable =
      | actor.Insertable
      | actor_info.Insertable
      | address.Insertable
      | category.Insertable
      | city.Insertable
      | country.Insertable
      | customer.Insertable
      | customer_list.Insertable
      | film.Insertable
      | film_actor.Insertable
      | film_category.Insertable
      | film_list.Insertable
      | inventory.Insertable
      | language.Insertable
      | nicer_but_slower_film_list.Insertable
      | payment.Insertable
      | payment_p2020_01.Insertable
      | payment_p2020_02.Insertable
      | payment_p2020_03.Insertable
      | payment_p2020_04.Insertable
      | payment_p2020_05.Insertable
      | payment_p2020_06.Insertable
      | rental.Insertable
      | sales_by_film_category.Insertable
      | sales_by_store.Insertable
      | staff.Insertable
      | staff_list.Insertable
      | store.Insertable;
    export type Updatable =
      | actor.Updatable
      | actor_info.Updatable
      | address.Updatable
      | category.Updatable
      | city.Updatable
      | country.Updatable
      | customer.Updatable
      | customer_list.Updatable
      | film.Updatable
      | film_actor.Updatable
      | film_category.Updatable
      | film_list.Updatable
      | inventory.Updatable
      | language.Updatable
      | nicer_but_slower_film_list.Updatable
      | payment.Updatable
      | payment_p2020_01.Updatable
      | payment_p2020_02.Updatable
      | payment_p2020_03.Updatable
      | payment_p2020_04.Updatable
      | payment_p2020_05.Updatable
      | payment_p2020_06.Updatable
      | rental.Updatable
      | sales_by_film_category.Updatable
      | sales_by_store.Updatable
      | staff.Updatable
      | staff_list.Updatable
      | store.Updatable;
    export type UniqueIndex =
      | actor.UniqueIndex
      | actor_info.UniqueIndex
      | address.UniqueIndex
      | category.UniqueIndex
      | city.UniqueIndex
      | country.UniqueIndex
      | customer.UniqueIndex
      | customer_list.UniqueIndex
      | film.UniqueIndex
      | film_actor.UniqueIndex
      | film_category.UniqueIndex
      | film_list.UniqueIndex
      | inventory.UniqueIndex
      | language.UniqueIndex
      | nicer_but_slower_film_list.UniqueIndex
      | payment.UniqueIndex
      | payment_p2020_01.UniqueIndex
      | payment_p2020_02.UniqueIndex
      | payment_p2020_03.UniqueIndex
      | payment_p2020_04.UniqueIndex
      | payment_p2020_05.UniqueIndex
      | payment_p2020_06.UniqueIndex
      | rental.UniqueIndex
      | sales_by_film_category.UniqueIndex
      | sales_by_store.UniqueIndex
      | staff.UniqueIndex
      | staff_list.UniqueIndex
      | store.UniqueIndex;
    export type Column =
      | actor.Column
      | actor_info.Column
      | address.Column
      | category.Column
      | city.Column
      | country.Column
      | customer.Column
      | customer_list.Column
      | film.Column
      | film_actor.Column
      | film_category.Column
      | film_list.Column
      | inventory.Column
      | language.Column
      | nicer_but_slower_film_list.Column
      | payment.Column
      | payment_p2020_01.Column
      | payment_p2020_02.Column
      | payment_p2020_03.Column
      | payment_p2020_04.Column
      | payment_p2020_05.Column
      | payment_p2020_06.Column
      | rental.Column
      | sales_by_film_category.Column
      | sales_by_store.Column
      | staff.Column
      | staff_list.Column
      | store.Column;

    export type AllBaseTables = [
      actor.Table,
      address.Table,
      category.Table,
      city.Table,
      country.Table,
      customer.Table,
      film.Table,
      film_actor.Table,
      film_category.Table,
      inventory.Table,
      language.Table,
      payment.Table,
      payment_p2020_01.Table,
      payment_p2020_02.Table,
      payment_p2020_03.Table,
      payment_p2020_04.Table,
      payment_p2020_05.Table,
      payment_p2020_06.Table,
      rental.Table,
      staff.Table,
      store.Table
    ];
    export type AllForeignTables = [];
    export type AllViews = [
      actor_info.Table,
      customer_list.Table,
      film_list.Table,
      nicer_but_slower_film_list.Table,
      sales_by_film_category.Table,
      sales_by_store.Table,
      staff_list.Table
    ];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [
      actor.Table,
      actor_info.Table,
      address.Table,
      category.Table,
      city.Table,
      country.Table,
      customer.Table,
      customer_list.Table,
      film.Table,
      film_actor.Table,
      film_category.Table,
      film_list.Table,
      inventory.Table,
      language.Table,
      nicer_but_slower_film_list.Table,
      payment.Table,
      payment_p2020_01.Table,
      payment_p2020_02.Table,
      payment_p2020_03.Table,
      payment_p2020_04.Table,
      payment_p2020_05.Table,
      payment_p2020_06.Table,
      rental.Table,
      sales_by_film_category.Table,
      sales_by_store.Table,
      staff.Table,
      staff_list.Table,
      store.Table
    ];
  }

  /* === global aggregate types === */

  export type Schema = "public";
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ["public"];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];

  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    actor: actor.Selectable;
    actor_info: actor_info.Selectable;
    address: address.Selectable;
    category: category.Selectable;
    city: city.Selectable;
    country: country.Selectable;
    customer: customer.Selectable;
    customer_list: customer_list.Selectable;
    film: film.Selectable;
    film_actor: film_actor.Selectable;
    film_category: film_category.Selectable;
    film_list: film_list.Selectable;
    inventory: inventory.Selectable;
    language: language.Selectable;
    nicer_but_slower_film_list: nicer_but_slower_film_list.Selectable;
    payment: payment.Selectable;
    payment_p2020_01: payment_p2020_01.Selectable;
    payment_p2020_02: payment_p2020_02.Selectable;
    payment_p2020_03: payment_p2020_03.Selectable;
    payment_p2020_04: payment_p2020_04.Selectable;
    payment_p2020_05: payment_p2020_05.Selectable;
    payment_p2020_06: payment_p2020_06.Selectable;
    rental: rental.Selectable;
    sales_by_film_category: sales_by_film_category.Selectable;
    sales_by_store: sales_by_store.Selectable;
    staff: staff.Selectable;
    staff_list: staff_list.Selectable;
    store: store.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    actor: actor.JSONSelectable;
    actor_info: actor_info.JSONSelectable;
    address: address.JSONSelectable;
    category: category.JSONSelectable;
    city: city.JSONSelectable;
    country: country.JSONSelectable;
    customer: customer.JSONSelectable;
    customer_list: customer_list.JSONSelectable;
    film: film.JSONSelectable;
    film_actor: film_actor.JSONSelectable;
    film_category: film_category.JSONSelectable;
    film_list: film_list.JSONSelectable;
    inventory: inventory.JSONSelectable;
    language: language.JSONSelectable;
    nicer_but_slower_film_list: nicer_but_slower_film_list.JSONSelectable;
    payment: payment.JSONSelectable;
    payment_p2020_01: payment_p2020_01.JSONSelectable;
    payment_p2020_02: payment_p2020_02.JSONSelectable;
    payment_p2020_03: payment_p2020_03.JSONSelectable;
    payment_p2020_04: payment_p2020_04.JSONSelectable;
    payment_p2020_05: payment_p2020_05.JSONSelectable;
    payment_p2020_06: payment_p2020_06.JSONSelectable;
    rental: rental.JSONSelectable;
    sales_by_film_category: sales_by_film_category.JSONSelectable;
    sales_by_store: sales_by_store.JSONSelectable;
    staff: staff.JSONSelectable;
    staff_list: staff_list.JSONSelectable;
    store: store.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    actor: actor.Whereable;
    actor_info: actor_info.Whereable;
    address: address.Whereable;
    category: category.Whereable;
    city: city.Whereable;
    country: country.Whereable;
    customer: customer.Whereable;
    customer_list: customer_list.Whereable;
    film: film.Whereable;
    film_actor: film_actor.Whereable;
    film_category: film_category.Whereable;
    film_list: film_list.Whereable;
    inventory: inventory.Whereable;
    language: language.Whereable;
    nicer_but_slower_film_list: nicer_but_slower_film_list.Whereable;
    payment: payment.Whereable;
    payment_p2020_01: payment_p2020_01.Whereable;
    payment_p2020_02: payment_p2020_02.Whereable;
    payment_p2020_03: payment_p2020_03.Whereable;
    payment_p2020_04: payment_p2020_04.Whereable;
    payment_p2020_05: payment_p2020_05.Whereable;
    payment_p2020_06: payment_p2020_06.Whereable;
    rental: rental.Whereable;
    sales_by_film_category: sales_by_film_category.Whereable;
    sales_by_store: sales_by_store.Whereable;
    staff: staff.Whereable;
    staff_list: staff_list.Whereable;
    store: store.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    actor: actor.Insertable;
    actor_info: actor_info.Insertable;
    address: address.Insertable;
    category: category.Insertable;
    city: city.Insertable;
    country: country.Insertable;
    customer: customer.Insertable;
    customer_list: customer_list.Insertable;
    film: film.Insertable;
    film_actor: film_actor.Insertable;
    film_category: film_category.Insertable;
    film_list: film_list.Insertable;
    inventory: inventory.Insertable;
    language: language.Insertable;
    nicer_but_slower_film_list: nicer_but_slower_film_list.Insertable;
    payment: payment.Insertable;
    payment_p2020_01: payment_p2020_01.Insertable;
    payment_p2020_02: payment_p2020_02.Insertable;
    payment_p2020_03: payment_p2020_03.Insertable;
    payment_p2020_04: payment_p2020_04.Insertable;
    payment_p2020_05: payment_p2020_05.Insertable;
    payment_p2020_06: payment_p2020_06.Insertable;
    rental: rental.Insertable;
    sales_by_film_category: sales_by_film_category.Insertable;
    sales_by_store: sales_by_store.Insertable;
    staff: staff.Insertable;
    staff_list: staff_list.Insertable;
    store: store.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    actor: actor.Updatable;
    actor_info: actor_info.Updatable;
    address: address.Updatable;
    category: category.Updatable;
    city: city.Updatable;
    country: country.Updatable;
    customer: customer.Updatable;
    customer_list: customer_list.Updatable;
    film: film.Updatable;
    film_actor: film_actor.Updatable;
    film_category: film_category.Updatable;
    film_list: film_list.Updatable;
    inventory: inventory.Updatable;
    language: language.Updatable;
    nicer_but_slower_film_list: nicer_but_slower_film_list.Updatable;
    payment: payment.Updatable;
    payment_p2020_01: payment_p2020_01.Updatable;
    payment_p2020_02: payment_p2020_02.Updatable;
    payment_p2020_03: payment_p2020_03.Updatable;
    payment_p2020_04: payment_p2020_04.Updatable;
    payment_p2020_05: payment_p2020_05.Updatable;
    payment_p2020_06: payment_p2020_06.Updatable;
    rental: rental.Updatable;
    sales_by_film_category: sales_by_film_category.Updatable;
    sales_by_store: sales_by_store.Updatable;
    staff: staff.Updatable;
    staff_list: staff_list.Updatable;
    store: store.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    actor: actor.UniqueIndex;
    actor_info: actor_info.UniqueIndex;
    address: address.UniqueIndex;
    category: category.UniqueIndex;
    city: city.UniqueIndex;
    country: country.UniqueIndex;
    customer: customer.UniqueIndex;
    customer_list: customer_list.UniqueIndex;
    film: film.UniqueIndex;
    film_actor: film_actor.UniqueIndex;
    film_category: film_category.UniqueIndex;
    film_list: film_list.UniqueIndex;
    inventory: inventory.UniqueIndex;
    language: language.UniqueIndex;
    nicer_but_slower_film_list: nicer_but_slower_film_list.UniqueIndex;
    payment: payment.UniqueIndex;
    payment_p2020_01: payment_p2020_01.UniqueIndex;
    payment_p2020_02: payment_p2020_02.UniqueIndex;
    payment_p2020_03: payment_p2020_03.UniqueIndex;
    payment_p2020_04: payment_p2020_04.UniqueIndex;
    payment_p2020_05: payment_p2020_05.UniqueIndex;
    payment_p2020_06: payment_p2020_06.UniqueIndex;
    rental: rental.UniqueIndex;
    sales_by_film_category: sales_by_film_category.UniqueIndex;
    sales_by_store: sales_by_store.UniqueIndex;
    staff: staff.UniqueIndex;
    staff_list: staff_list.UniqueIndex;
    store: store.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    actor: actor.Column;
    actor_info: actor_info.Column;
    address: address.Column;
    category: category.Column;
    city: city.Column;
    country: country.Column;
    customer: customer.Column;
    customer_list: customer_list.Column;
    film: film.Column;
    film_actor: film_actor.Column;
    film_category: film_category.Column;
    film_list: film_list.Column;
    inventory: inventory.Column;
    language: language.Column;
    nicer_but_slower_film_list: nicer_but_slower_film_list.Column;
    payment: payment.Column;
    payment_p2020_01: payment_p2020_01.Column;
    payment_p2020_02: payment_p2020_02.Column;
    payment_p2020_03: payment_p2020_03.Column;
    payment_p2020_04: payment_p2020_04.Column;
    payment_p2020_05: payment_p2020_05.Column;
    payment_p2020_06: payment_p2020_06.Column;
    rental: rental.Column;
    sales_by_film_category: sales_by_film_category.Column;
    sales_by_store: sales_by_store.Column;
    staff: staff.Column;
    staff_list: staff_list.Column;
    store: store.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    actor: actor.SQL;
    actor_info: actor_info.SQL;
    address: address.SQL;
    category: category.SQL;
    city: city.SQL;
    country: country.SQL;
    customer: customer.SQL;
    customer_list: customer_list.SQL;
    film: film.SQL;
    film_actor: film_actor.SQL;
    film_category: film_category.SQL;
    film_list: film_list.SQL;
    inventory: inventory.SQL;
    language: language.SQL;
    nicer_but_slower_film_list: nicer_but_slower_film_list.SQL;
    payment: payment.SQL;
    payment_p2020_01: payment_p2020_01.SQL;
    payment_p2020_02: payment_p2020_02.SQL;
    payment_p2020_03: payment_p2020_03.SQL;
    payment_p2020_04: payment_p2020_04.SQL;
    payment_p2020_05: payment_p2020_05.SQL;
    payment_p2020_06: payment_p2020_06.SQL;
    rental: rental.SQL;
    sales_by_film_category: sales_by_film_category.SQL;
    sales_by_store: sales_by_store.SQL;
    staff: staff.SQL;
    staff_list: staff_list.SQL;
    store: store.SQL;
  }[T];
}
